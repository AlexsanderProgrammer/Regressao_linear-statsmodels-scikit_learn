# -*- coding: utf-8 -*-
"""Regressão linear-statsmodels-scikit-learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xutKL5xIBURqdM-oPyx6Wz7cx7d-VMYP
"""

import pandas as pd
import numpy as np

data = pd.read_csv('/content/sample_data/california_housing_test.csv')

data.head()

"""# Statsmodels

Regressão linear estatistica
"""

import statsmodels.api as sm
y = 'median_house_value'

#OLS sem normalização
modelo = sm.OLS(data[y], data.drop([y], axis=1))
res = modelo.fit()
print(res.summary())

from sklearn.preprocessing import StandardScaler

#Normalizando com o StandardScaler
X = data.drop([y], axis=1)
scaler = StandardScaler()
normalized_X = scaler.fit_transform(X)
normalized_X = pd.DataFrame(normalized_X, columns=X.columns)
normalized_X['intercept'] = 1

modelo = sm.OLS(data[y], normalized_X)
res = modelo.fit()
print(res.summary())

"""# Scikit-learn

Regressão Preditiva
"""

data.shape

# sem normalização
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

Xtrain, Xval, ytrain, yval = train_test_split(X, data[y], test_size=0.3, random_state=0)
print(Xtrain.shape, Xval.shape, ytrain.shape, yval.shape)

modelo = LinearRegression(normalize=True)
modelo.fit(Xtrain, ytrain)

p = modelo.predict(Xval)

from sklearn.metrics import mean_squared_error
np.sqrt(mean_squared_error(yval, p))

modelo.coef_

"""# Scikit-learn standardizado"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


Xtrain, Xval, ytrain, yval = train_test_split(X, data[y], test_size=0.3, random_state=0)
print(Xtrain.shape, Xval.shape, ytrain.shape, yval.shape)

scaler = StandardScaler()
Xtrain_scaled = scaler.fit_transform(Xtrain)
Xval_scaled = scaler.transform(Xval)

modelo = LinearRegression(fit_intercept=True, normalize=False)
modelo.fit(Xtrain_scaled, ytrain)

p = modelo.predict(Xval_scaled)

from sklearn.metrics import mean_squared_error
np.sqrt(mean_squared_error(yval, p))

modelo.coef_